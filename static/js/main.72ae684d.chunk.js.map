{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","message","Navbar","mode","href","title","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","background","rows","newText","length","showAlert","split","App","setMode","setAlert","setTimeout","document","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.72ae684d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n           const lower = word.toLowerCase();\r\n           return lower.charAt(0).toUpperCase() + lower.slice(1); \r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message}\r\n        </div>\r\n    )\r\n}\r\n","import * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\"  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home </Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n              <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode =='dark'?'light':'dark'}`}>\r\n            <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n};\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handelUpClick = ()=>{\r\n        // console.log('upper case clicked'+text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        if(newText.length>0){\r\n            props.showAlert(\"Converted to Upper Case\", \"success\");\r\n        }\r\n        \r\n    }\r\n\r\n    const handelLoClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        if(newText.length>0){\r\n        props.showAlert(\"Converted to Lower Case\", \"success\");\r\n        }\r\n    }\r\n\r\n    const handelClearClick = () => {\r\n        if(text.length>0){\r\n            props.showAlert(\"Text has been removed\", \"success\");\r\n        }\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n    const handelOnChange = (event) =>{\r\n        // console.log('handel on change');\r\n        setText(event.target.value);\r\n    }\r\n   \r\n\r\n    const [text, setText] = useState(\"\");   \r\n    return (\r\n        <>\r\n            <div className = \"container\" style= {{color: props.mode==='dark'?'white':'black'}}>\r\n                <h1 style = {{color: props.mode==='dark'?'white' : 'black'}}>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value= {text}  onChange = {handelOnChange} style = {{background: props.mode==='dark'?'#042743': 'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className = \"btn btn-primary mx-1\" onClick= {handelUpClick} >Convert to UpperCase</button>\r\n                <button className = \"btn btn-primary mx-1\" onClick= {handelLoClick} >Convert to LowerCase</button>\r\n                <button className = \"btn btn-primary mx-1\" onClick= {handelClearClick} >Clear Text</button>\r\n            </div>\r\n            <div className = \"container my-3\" style= {{color: props.mode==='dark'?'white':'black'}}>\r\n                <h2> Your text summary</h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters.</p>\r\n                <h2>Preview</h2>\r\n                <p>{text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React,{ useState } from \"react\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode,setMode] = useState('light'); //whether dark mode is enabled or not.\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) =>{\n    setAlert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () =>{\n    if(mode === \"light\"){\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    }\n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light Mode has been enabled', 'success');\n    }\n  }\n\n  return (\n   <>\n   {/* <Router> */}\n    <Navbar title = \"TextUtil\" aboutText = \"About\" mode= {mode} toggleMode= {toggleMode}/>\n    <Alert alert= {alert}/>\n      <div className=\"container my-3\">\n      {/* <About/> */}\n        {/* <Routes> */}\n          {/* users -> component 1\n          /users/home -> component 2 */}\n          {/* <Route exact path=\"/about\" element= {<About/>}>\n          </Route>\n          <Route exact path=\"/\" element = {<TextForm showAlert = {showAlert} heading = \"Enter The Text To Analyze Below : \" mode = {mode}/>}>\n          </Route>\n        </Routes> */}\n            <TextForm showAlert = {showAlert} heading = \"Enter The Text To Analyze Below : \" mode = {mode}/>\n\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}